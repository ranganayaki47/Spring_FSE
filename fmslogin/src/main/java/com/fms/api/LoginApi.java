/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.16).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.fms.api;

import java.io.IOException;
import java.util.Optional;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fms.entity.User;
import com.fms.model.LoginCredentials;
import com.fms.model.UserInfo;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import reactor.core.publisher.Mono;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-01-22T18:02:22.909+05:30[Asia/Calcutta]")
@Api(value = "login", description = "the login API")
@CrossOrigin("http://localhost:3000")
public interface LoginApi {

    Logger log = LoggerFactory.getLogger(LoginApi.class);

    default Optional<ObjectMapper> getObjectMapper(){
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest(){
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "", nickname = "login", notes = "validate user login", response = User.class, tags={ "fms login", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful login", response = UserInfo.class),
        @ApiResponse(code = 401, message = "unauthorised login") })
    @RequestMapping(value = "/login",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default Mono<ResponseEntity<User>> login(@ApiParam(value = ""  )  @Valid @RequestBody LoginCredentials body
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                	return Mono.just(new ResponseEntity<User>(HttpStatus.INTERNAL_SERVER_ERROR));
                    //return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"roleId\" : \"roleId\",\r\n  \"userId\" : \"userId\",\r\n  \"token\" : \"token\"\r\n}", UserInfo.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (Exception e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return Mono.just(new ResponseEntity<User>(HttpStatus.INTERNAL_SERVER_ERROR));
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default LoginApi interface so no example is generated");
        }
        return  Mono.just(new ResponseEntity<User>(HttpStatus.NOT_IMPLEMENTED)); 
    }

}
