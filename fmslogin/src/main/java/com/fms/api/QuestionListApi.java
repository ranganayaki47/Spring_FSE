/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.16).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.fms.api;

import java.util.Optional;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fms.entity.Question;
import com.fms.entity.QuestionModel;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-01-22T18:02:22.909+05:30[Asia/Calcutta]")
@Api(value = "question", description = "the question API")
@CrossOrigin("http://localhost:3000")
public interface QuestionListApi {

    Logger log = LoggerFactory.getLogger(RoleApi.class);

    default Optional<ObjectMapper> getObjectMapper(){
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest(){
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "", nickname = "role", notes = "Get feedback question", response = Question.class, tags={ "fms login", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = Question.class),
        @ApiResponse(code = 404, message = "Not  found") })
    @RequestMapping(value = "/question",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default Flux<ResponseEntity<Question>> questionList() {
       
            
                try {
                    return Flux.just(new ResponseEntity<>( HttpStatus.NOT_IMPLEMENTED));
                } catch (Exception e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return Flux.just(new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR));
                }
            
        
      
    }

}
